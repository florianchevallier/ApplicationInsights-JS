{"version":3,"file":"withAITracking.js","sourceRoot":"","sources":["../src/withAITracking.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { IMetricTelemetry } from '@microsoft/applicationinsights-common';\nimport * as React from 'react';\nimport ReactPlugin from './ReactPlugin';\n\n/**\n * Higher-order component function to hook Application Insights tracking \n * in a React component's lifecycle.\n * \n * @param reactPlugin ReactPlugin instance\n * @param Component the React component to be instrumented \n * @param componentName (optional) component name\n */\nexport default function withAITracking<P>(reactPlugin: ReactPlugin, Component: React.ComponentType<P>, componentName?: string): React.ComponentClass<P> {\n\n  if (componentName === undefined || componentName === null || typeof componentName !== 'string') {\n    componentName = Component.prototype.constructor.name;\n  }\n\n  return class extends React.Component<P> {\n    private _mountTimestamp: number = 0;\n    private _firstActiveTimestamp: number = 0;\n    private _idleStartTimestamp: number = 0;\n    private _lastActiveTimestamp: number = 0;\n    private _totalIdleTime: number = 0;\n    private _idleCount: number = 0;\n    private _idleTimeout: number = 5000;\n    private _intervalId?: any;\n\n    public componentDidMount() {\n      this._mountTimestamp = Date.now();\n      this._firstActiveTimestamp = 0;\n      this._totalIdleTime = 0;\n      this._lastActiveTimestamp = 0;\n      this._idleStartTimestamp = 0;\n      this._idleCount = 0;\n\n      this._intervalId = setInterval(() => {\n        if (this._lastActiveTimestamp > 0 && this._idleStartTimestamp === 0 && Date.now() - this._lastActiveTimestamp >= this._idleTimeout) {\n          this._idleStartTimestamp = Date.now();\n          this._idleCount++;\n        }\n      }, 100);\n    }\n\n    public componentWillUnmount() {\n      if (this._mountTimestamp === 0) {\n        throw new Error('withAITracking:componentWillUnmount: mountTimestamp is not initialized.');\n      }\n      if (this._intervalId) {\n        clearInterval(this._intervalId);\n      }\n\n      if (this._firstActiveTimestamp === 0) {\n        return;\n      }\n\n      const engagementTime = this.getEngagementTimeSeconds();\n      const metricData: IMetricTelemetry = {\n        average: engagementTime,\n        name: 'React Component Engaged Time (seconds)',\n        sampleCount: 1\n      };\n\n      const additionalProperties: { [key: string]: any } = { 'Component Name': componentName };\n      reactPlugin.trackMetric(metricData, additionalProperties);\n    }\n\n    public render() {\n      return (\n        <div\n          onKeyDown={this.trackActivity}\n          onMouseMove={this.trackActivity}\n          onScroll={this.trackActivity}\n          onMouseDown={this.trackActivity}\n          onTouchStart={this.trackActivity}\n          onTouchMove={this.trackActivity}\n          className=\"appinsights-hoc\"\n        >\n          <Component {...this.props} />\n        </div>\n      );\n    }\n\n    private trackActivity = (e: React.SyntheticEvent<any>): void => {\n      if (this._firstActiveTimestamp === 0) {\n        this._firstActiveTimestamp = Date.now();\n        this._lastActiveTimestamp = this._firstActiveTimestamp;\n      } else {\n        this._lastActiveTimestamp = Date.now();\n      }\n\n      if (this._idleStartTimestamp > 0) {\n        const lastIdleTime = this._lastActiveTimestamp - this._idleStartTimestamp;\n        this._totalIdleTime += lastIdleTime;\n        this._idleStartTimestamp = 0;\n      }\n    }\n\n    private getEngagementTimeSeconds(): number {\n      return (Date.now() - this._firstActiveTimestamp - this._totalIdleTime - this._idleCount * this._idleTimeout) / 1000;\n    }\n  }\n}\n"]}