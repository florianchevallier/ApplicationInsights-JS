{"version":3,"file":"ReactPlugin.js","sourceRoot":"","sources":["../src/ReactPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ReactPlugin.ts\n * @copyright Microsoft 2019\n */\n\nimport {\n    IConfig, IPageViewTelemetry, IMetricTelemetry, IAppInsights\n} from \"@microsoft/applicationinsights-common\";\nimport {\n    IPlugin, IConfiguration, IAppInsightsCore,\n    ITelemetryPlugin, CoreUtils, ITelemetryItem,\n    IDiagnosticLogger, _InternalMessageId, LoggingSeverity, ICustomProperties\n} from \"@microsoft/applicationinsights-core-js\";\nimport { IReactExtensionConfig } from './Interfaces/IReactExtensionConfig';\nimport { History, LocationListener, Location, Action } from \"history\";\n\nexport default class ReactPlugin implements ITelemetryPlugin {\n    private _logger: IDiagnosticLogger;\n    public priority = 180;\n    public identifier = 'ReactPlugin';\n\n    private _analyticsPlugin: IAppInsights;\n    private _nextPlugin: ITelemetryPlugin;\n    private _extensionConfig: IReactExtensionConfig;\n\n    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[]) {\n        this._extensionConfig =\n            config.extensionConfig && config.extensionConfig[this.identifier]\n                ? (config.extensionConfig[this.identifier] as IReactExtensionConfig)\n                : { history: null };\n        this._logger = core.logger;\n        extensions.forEach(ext => {\n            let identifier = (ext as ITelemetryPlugin).identifier;\n            if (identifier === 'ApplicationInsightsAnalytics') {\n                this._analyticsPlugin = (<any>ext) as IAppInsights;\n            }\n        });\n        if (this._extensionConfig.history) {\n            this.addHistoryListener(this._extensionConfig.history);\n            const pageViewTelemetry: IPageViewTelemetry = {\n                uri: this._extensionConfig.history.location.pathname\n            };\n            this.trackPageView(pageViewTelemetry);\n        }\n    }\n\n    /**\n     * Add Part A fields to the event\n     * @param event The event that needs to be processed\n     */\n    processTelemetry(event: ITelemetryItem) {\n        if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\n            this._nextPlugin.processTelemetry(event);\n        }\n    }\n\n    /**\n     * Sets the next plugin that comes after this plugin\n     * @param nextPlugin The next plugin\n     */\n    setNextPlugin(nextPlugin: ITelemetryPlugin) {\n        this._nextPlugin = nextPlugin;\n    }\n\n\n    trackMetric(metric: IMetricTelemetry, customProperties: ICustomProperties) {\n        if (this._analyticsPlugin) {\n            this._analyticsPlugin.trackMetric(metric, customProperties);\n        } else {\n            this._logger.throwInternal(\n                LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\n        }\n    }\n\n    trackPageView(pageView: IPageViewTelemetry) {\n        if (this._analyticsPlugin) {\n            this._analyticsPlugin.trackPageView(pageView);\n        } else {\n            this._logger.throwInternal(\n                LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\n        }\n    }\n\n    private addHistoryListener(history: History): void {\n        let locationListener: LocationListener = (location: Location, action: Action): void => {\n            // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry\n            setTimeout(() => {\n                const pageViewTelemetry: IPageViewTelemetry = { uri: location.pathname };\n                this.trackPageView(pageViewTelemetry);\n            }, 500);\n        };\n        history.listen(locationListener);\n    }\n}"]}